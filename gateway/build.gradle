plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'anhlv'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()  // Official Maven repository for open-source libraries
	google()        // Google's repository, primarily for Android dependencies
	gradlePluginPortal()  // For Gradle plugins
	maven { url 'https://jitpack.io' }
	mavenLocal()    // Local Maven repository for ShareLibrary
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {

	implementation('org.springframework.boot:spring-boot-starter-webflux') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	
	// Spring Boot Log4j2 starter
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	
	// Exclude logback và SLF4J implementations từ tất cả dependencies
	configurations.all {
		exclude group: 'ch.qos.logback', module: 'logback-classic'
		exclude group: 'ch.qos.logback', module: 'logback-core'
		exclude group: 'org.slf4j', module: 'jul-to-slf4j'
		exclude group: 'org.slf4j', module: 'slf4j-simple'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl' // Exclude old SLF4J 1.x impl
	}
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.0.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
	
	// OpenTelemetry API để đọc Span hiện tại và lấy trace/span id
	implementation 'io.opentelemetry:opentelemetry-api:1.32.0'
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
	implementation 'io.github.resilience4j:resilience4j-ratelimiter'

	// Dependency cho JWT
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// ShareLibrary dependency - sử dụng sẵn tracing từ ShareLibrary
	implementation 'com.company:ShareLibrary:1.0-SNAPSHOT'
	
	// Jackson để parse và modify JSON response
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	
	// Micrometer Tracing đã có sẵn, không cần Sleuth

	// Log4j2 dependencies đã có trong spring-boot-starter-log4j2
	// Thêm SLF4J API và Log4j2 SLF4J bridge cho Spring Cloud - với version cụ thể
	implementation 'org.slf4j:slf4j-api:2.0.13'
	implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1' // SLF4J 2.x compatible
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Configuration để tự động resolve OpenTelemetry Java Agent dependency (giống face service)
configurations {
	otelAgent
}

dependencies {
	// Thêm OpenTelemetry Java Agent như dependency (giống cách face service làm)
	otelAgent 'io.opentelemetry.javaagent:opentelemetry-javaagent:1.32.0'
}

// Task để copy OpenTelemetry Java Agent từ dependency (giống face service maven-dependency-plugin)
task copyOtelAgent(type: Copy) {
	from configurations.otelAgent
	into 'build/libs'
	rename { 'opentelemetry-javaagent.jar' }
}

// Task để chạy Gateway với OpenTelemetry (giống face service spring-boot:run)
task runWithOtel(type: JavaExec, dependsOn: ['build', 'copyOtelAgent']) {
	group = 'application'
	description = 'Runs the Gateway with OpenTelemetry Java Agent (single command like face service)'
	
	mainClass = 'anhlv.gateway.GatewayApplication'
	classpath = sourceSets.main.runtimeClasspath
	
	// JVM arguments giống face service + encoding
	jvmArgs = [
		"-javaagent:build/libs/opentelemetry-javaagent.jar",
		"-Dotel.javaagent.configuration-file=otel-agent.properties",
		"-Dfile.encoding=UTF-8",
		"-Dconsole.encoding=UTF-8"
	]
	
	// Console output
	standardOutput = System.out
	errorOutput = System.err
	
	doFirst {
		println "Starting Gateway with OpenTelemetry..."
		
		// Kiểm tra OpenTelemetry agent file
		def agentFile = file("build/libs/opentelemetry-javaagent.jar")
		if (agentFile.exists()) {
			println "OpenTelemetry Agent: ${agentFile.absolutePath} (${agentFile.length()} bytes)"
		} else {
			throw new GradleException("OpenTelemetry agent not found! Run: ./gradlew copyOtelAgent")
		}
		
		// Kiểm tra config file
		def configFile = file("otel-agent.properties")
		if (configFile.exists()) {
			println "Configuration: ${configFile.absolutePath}"
		} else {
			println "WARNING: otel-agent.properties not found!"
		}
		
		println "Gateway URL: http://localhost:8080"
		println "Logs: logs/application.log"
		println "=" * 50
		println "Note: Look for '[gateway-service] [traceId] [spanId]' in logs to verify OpenTelemetry"
		println "=" * 50
	}
}

// Task để test OpenTelemetry hoạt động
task testOtel(dependsOn: 'runWithOtel') {
	group = 'verification'
	description = 'Test OpenTelemetry distributed tracing'
	
	doLast {
		println "Testing OpenTelemetry..."
		println "1. Check logs for: [gateway-service] [traceId] [spanId]"
		println "2. Test endpoint: curl http://localhost:8080/actuator/health"
		println "3. Monitor: tail -f logs/application.log"
	}
}

// Task để in Java home path
task printJavaHome {
	doLast {
		println project.java.toolchain.languageVersion.get().toString()
		println System.getProperty('java.home')
	}
}